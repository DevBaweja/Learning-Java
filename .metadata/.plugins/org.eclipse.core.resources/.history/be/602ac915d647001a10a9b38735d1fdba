import java.awt.*;
import java.awt.event.*;
import javax.swing.*;


@SuppressWarnings("serial")
class Chess extends JFrame implements ActionListener {

	int rows,cols;
	GridLayout g;
	int width,height;
	JButton[][] grid;
	Piece[][] pieces;
	public Chess()
	{
		setVisible(true); // for visibility
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // for closing
		setLocationRelativeTo(this); // center of window
		setTitle("Chess Game"); // for title
		width = 800;
		height = 800;
		setSize(width,height);
		//setSize(new Dimension(width, height));
		//setPreferredSize(new Dimension(width, height));
		
		setResizable(false); // for no resize
		rows = 8;
		cols = 8;
		g = new GridLayout(rows,cols);
		setLayout(g);
		
		setBackground(Color.WHITE);
		grid = new JButton[rows][cols];
		pieces = new Piece[rows][cols];
		createGrid();
		addGrid();
				
		setup();
		validate();
		//revalidate();
	}
	
	private void setup() {
		// TODO Auto-generated method stub
		
		// Filling up occupied spaces
		int i;
		i=0;
		do {
			for(int j=0;j<cols;j++)
				{
					pieces[i][j].setAlive(true);
					pieces[i][j].setType(-1);
				}
		i++;
		}while(i<=1);
		
		i=cols-1;
		do {
			for(int j=0;j<cols;j++)
				{
					pieces[i][j].setAlive(true);
					pieces[i][j].setType(1);
				}
		i--;
		}while(i>=cols-2);
		
		// Creating pawns
		createPawn();
	}

	private void createPawn() {
		// TODO Auto-generated method stub
		int i;
		i=1;
		for(int j=0;j<cols;j++)
		{
			pieces[i][j].setParameter("Pawn",false,false,false,true,false);
			grid[i][j].setText(pieces[i][j].getName());
		}
		i=6;
		for(int j=0;j<cols;j++)
		{
			pieces[i][j].setParameter("Pawn",false,false,false,true,false);
			grid[i][j].setText(pieces[i][j].getName());
		}
	}

	private void createGrid() {
		// TODO Auto-generated method stub
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				grid[i][j] = new JButton();
				pieces[i][j] = new Piece();
			}
		}
	}

	private void addGrid() {
		// TODO Auto-generated method stub
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				if((i+j)%2==0)
					grid[i][j].setBackground(Color.WHITE);
				else
					grid[i][j].setBackground(Color.BLACK);
				
				 //grid[i][j].setFocusPainted(false);
				 grid[i][j].setBorderPainted(false);
				 add(grid[i][j]);
				 grid[i][j].addActionListener(this);
			}
		}
	}

	
	public void paint(Graphics g)
	{
		
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		Object obj = e.getSource();
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				if(obj==grid[i][j])
				{
					System.out.println(pieces[i][j].getType());
					System.out.println(pieces[i][j].getName());
					
					if(pieces[i][j].line)
					{
						
					}
					if(pieces[i][j].diagonal)
					{
						
					}
					if(pieces[i][j].unusual)
					{
						
					}
					if(pieces[i][j].forward)
					{
						
					}
					if(pieces[i][j].onestep)
					{
						
					}
				}
			}
		}
	}
}

public class DemoMain
{
	public static void main(String[] args)
	{
		new Chess();	
	}
}
/*
ImageIcon icon = new ImageIcon("image.jpg");
Image img = icon.getImage();
Image newimg = img.getScaledInstance(100, 100, java.awt.Image.SCALE_SMOOTH);
grid[i][j].setIcon(new ImageIcon(newimg));

setRolloverIcon
setDisabledIcon
setSelectedIcon
setEnabled
setSelected

*/
